/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

/// <reference types="truffle-typings" />
import { BigNumber } from "bignumber.js";

export interface BoostableContract extends Truffle.Contract<BoostableInstance> {
  "new"(
    optIn: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<BoostableInstance>;
}

export interface DubiexContract extends Truffle.Contract<DubiexInstance> {
  "new"(
    optIn: string | BigNumber,
    prps: string | BigNumber,
    dubi: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<DubiexInstance>;
}

export interface DummyVanillaERC20Contract
  extends Truffle.Contract<DummyVanillaERC20Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<DummyVanillaERC20Instance>;
}

export interface DummyVanillaERC721Contract
  extends Truffle.Contract<DummyVanillaERC721Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<DummyVanillaERC721Instance>;
}

export interface EIP712BoostableContract
  extends Truffle.Contract<EIP712BoostableInstance> {
  "new"(
    optIn: string | BigNumber,
    domainSeparator: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<EIP712BoostableInstance>;
}

export interface ERC165Contract extends Truffle.Contract<ERC165Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ERC165Instance>;
}

export interface ERC20Contract extends Truffle.Contract<ERC20Instance> {
  "new"(
    name: string,
    symbol: string,
    meta?: Truffle.TransactionDetails
  ): Promise<ERC20Instance>;
}

export interface ERC721Contract extends Truffle.Contract<ERC721Instance> {
  "new"(
    name: string,
    symbol: string,
    meta?: Truffle.TransactionDetails
  ): Promise<ERC721Instance>;
}

export interface ERC721HolderContract
  extends Truffle.Contract<ERC721HolderInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ERC721HolderInstance>;
}

export interface IBoostableERC20Contract
  extends Truffle.Contract<IBoostableERC20Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IBoostableERC20Instance>;
}

export interface IERC165Contract extends Truffle.Contract<IERC165Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IERC165Instance>;
}

export interface IERC1820RegistryContract
  extends Truffle.Contract<IERC1820RegistryInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IERC1820RegistryInstance>;
}

export interface IERC20Contract extends Truffle.Contract<IERC20Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IERC20Instance>;
}

export interface IERC721Contract extends Truffle.Contract<IERC721Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IERC721Instance>;
}

export interface IERC721EnumerableContract
  extends Truffle.Contract<IERC721EnumerableInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IERC721EnumerableInstance>;
}

export interface IERC721MetadataContract
  extends Truffle.Contract<IERC721MetadataInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IERC721MetadataInstance>;
}

export interface IERC721ReceiverContract
  extends Truffle.Contract<IERC721ReceiverInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IERC721ReceiverInstance>;
}

export interface IOptInContract extends Truffle.Contract<IOptInInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IOptInInstance>;
}

export interface MigrationsContract
  extends Truffle.Contract<MigrationsInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<MigrationsInstance>;
}

export interface OwnableContract extends Truffle.Contract<OwnableInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<OwnableInstance>;
}

export interface BoostableInstance extends Truffle.ContractInstance {
  getNonce(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
}

export interface DubiexInstance extends Truffle.ContractInstance {
  activateKillSwitch: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  boostedCancelOrder: {
    (
      order: {
        input: { id: number | BigNumber | string; maker: string | BigNumber };
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      order: {
        input: { id: number | BigNumber | string; maker: string | BigNumber };
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      order: {
        input: { id: number | BigNumber | string; maker: string | BigNumber };
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      order: {
        input: { id: number | BigNumber | string; maker: string | BigNumber };
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  boostedCancelOrderBatch: {
    (
      orders: {
        input: { id: number | BigNumber | string; maker: string | BigNumber };
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      orders: {
        input: { id: number | BigNumber | string; maker: string | BigNumber };
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      orders: {
        input: { id: number | BigNumber | string; maker: string | BigNumber };
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      orders: {
        input: { id: number | BigNumber | string; maker: string | BigNumber };
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  boostedMakeOrder: {
    (
      order: {
        input: {
          makerValue: number | BigNumber | string;
          takerValue: number | BigNumber | string;
          pair: {
            makerContractAddress: string | BigNumber;
            makerCurrencyType: number | BigNumber | string;
            takerContractAddress: string | BigNumber;
            takerCurrencyType: number | BigNumber | string;
          };
          orderId: number | BigNumber | string;
          ancestorOrderId: number | BigNumber | string;
          updatedRatioWei: number | BigNumber | string;
        };
        maker: string | BigNumber;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      order: {
        input: {
          makerValue: number | BigNumber | string;
          takerValue: number | BigNumber | string;
          pair: {
            makerContractAddress: string | BigNumber;
            makerCurrencyType: number | BigNumber | string;
            takerContractAddress: string | BigNumber;
            takerCurrencyType: number | BigNumber | string;
          };
          orderId: number | BigNumber | string;
          ancestorOrderId: number | BigNumber | string;
          updatedRatioWei: number | BigNumber | string;
        };
        maker: string | BigNumber;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      order: {
        input: {
          makerValue: number | BigNumber | string;
          takerValue: number | BigNumber | string;
          pair: {
            makerContractAddress: string | BigNumber;
            makerCurrencyType: number | BigNumber | string;
            takerContractAddress: string | BigNumber;
            takerCurrencyType: number | BigNumber | string;
          };
          orderId: number | BigNumber | string;
          ancestorOrderId: number | BigNumber | string;
          updatedRatioWei: number | BigNumber | string;
        };
        maker: string | BigNumber;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      order: {
        input: {
          makerValue: number | BigNumber | string;
          takerValue: number | BigNumber | string;
          pair: {
            makerContractAddress: string | BigNumber;
            makerCurrencyType: number | BigNumber | string;
            takerContractAddress: string | BigNumber;
            takerCurrencyType: number | BigNumber | string;
          };
          orderId: number | BigNumber | string;
          ancestorOrderId: number | BigNumber | string;
          updatedRatioWei: number | BigNumber | string;
        };
        maker: string | BigNumber;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  boostedMakeOrderBatch: {
    (
      orders: {
        input: {
          makerValue: number | BigNumber | string;
          takerValue: number | BigNumber | string;
          pair: {
            makerContractAddress: string | BigNumber;
            makerCurrencyType: number | BigNumber | string;
            takerContractAddress: string | BigNumber;
            takerCurrencyType: number | BigNumber | string;
          };
          orderId: number | BigNumber | string;
          ancestorOrderId: number | BigNumber | string;
          updatedRatioWei: number | BigNumber | string;
        };
        maker: string | BigNumber;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      orders: {
        input: {
          makerValue: number | BigNumber | string;
          takerValue: number | BigNumber | string;
          pair: {
            makerContractAddress: string | BigNumber;
            makerCurrencyType: number | BigNumber | string;
            takerContractAddress: string | BigNumber;
            takerCurrencyType: number | BigNumber | string;
          };
          orderId: number | BigNumber | string;
          ancestorOrderId: number | BigNumber | string;
          updatedRatioWei: number | BigNumber | string;
        };
        maker: string | BigNumber;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      orders: {
        input: {
          makerValue: number | BigNumber | string;
          takerValue: number | BigNumber | string;
          pair: {
            makerContractAddress: string | BigNumber;
            makerCurrencyType: number | BigNumber | string;
            takerContractAddress: string | BigNumber;
            takerCurrencyType: number | BigNumber | string;
          };
          orderId: number | BigNumber | string;
          ancestorOrderId: number | BigNumber | string;
          updatedRatioWei: number | BigNumber | string;
        };
        maker: string | BigNumber;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      orders: {
        input: {
          makerValue: number | BigNumber | string;
          takerValue: number | BigNumber | string;
          pair: {
            makerContractAddress: string | BigNumber;
            makerCurrencyType: number | BigNumber | string;
            takerContractAddress: string | BigNumber;
            takerCurrencyType: number | BigNumber | string;
          };
          orderId: number | BigNumber | string;
          ancestorOrderId: number | BigNumber | string;
          updatedRatioWei: number | BigNumber | string;
        };
        maker: string | BigNumber;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  boostedTakeOrder: {
    (
      order: {
        input: {
          id: number | BigNumber | string;
          maker: string | BigNumber;
          takerValue: number | BigNumber | string;
          maxTakerMakerRatio: number | BigNumber | string;
        };
        taker: string | BigNumber;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      order: {
        input: {
          id: number | BigNumber | string;
          maker: string | BigNumber;
          takerValue: number | BigNumber | string;
          maxTakerMakerRatio: number | BigNumber | string;
        };
        taker: string | BigNumber;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      order: {
        input: {
          id: number | BigNumber | string;
          maker: string | BigNumber;
          takerValue: number | BigNumber | string;
          maxTakerMakerRatio: number | BigNumber | string;
        };
        taker: string | BigNumber;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      order: {
        input: {
          id: number | BigNumber | string;
          maker: string | BigNumber;
          takerValue: number | BigNumber | string;
          maxTakerMakerRatio: number | BigNumber | string;
        };
        taker: string | BigNumber;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  boostedTakeOrderBatch: {
    (
      boostedTakeOrders: {
        input: {
          id: number | BigNumber | string;
          maker: string | BigNumber;
          takerValue: number | BigNumber | string;
          maxTakerMakerRatio: number | BigNumber | string;
        };
        taker: string | BigNumber;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      boostedTakeOrders: {
        input: {
          id: number | BigNumber | string;
          maker: string | BigNumber;
          takerValue: number | BigNumber | string;
          maxTakerMakerRatio: number | BigNumber | string;
        };
        taker: string | BigNumber;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      boostedTakeOrders: {
        input: {
          id: number | BigNumber | string;
          maker: string | BigNumber;
          takerValue: number | BigNumber | string;
          maxTakerMakerRatio: number | BigNumber | string;
        };
        taker: string | BigNumber;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      boostedTakeOrders: {
        input: {
          id: number | BigNumber | string;
          maker: string | BigNumber;
          takerValue: number | BigNumber | string;
          maxTakerMakerRatio: number | BigNumber | string;
        };
        taker: string | BigNumber;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  cancelOrder: {
    (
      input: { id: number | BigNumber | string; maker: string | BigNumber },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      input: { id: number | BigNumber | string; maker: string | BigNumber },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      input: { id: number | BigNumber | string; maker: string | BigNumber },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      input: { id: number | BigNumber | string; maker: string | BigNumber },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  cancelOrders: {
    (
      inputs: { id: number | BigNumber | string; maker: string | BigNumber }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      inputs: { id: number | BigNumber | string; maker: string | BigNumber }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean[]>;
    sendTransaction(
      inputs: { id: number | BigNumber | string; maker: string | BigNumber }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      inputs: { id: number | BigNumber | string; maker: string | BigNumber }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getNonce(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getOrder(
    maker: string | BigNumber,
    id: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    id: BigNumber;
    makerValue: BigNumber;
    takerValue: BigNumber;
    orderPairAlias: BigNumber;
    pair: {
      makerContractAddress: string;
      makerCurrencyType: BigNumber;
      takerContractAddress: string;
      takerCurrencyType: BigNumber;
    };
    flags: {
      isMakerERC721: boolean;
      isTakerERC721: boolean;
      isHidden: boolean;
      hasSuccessor: boolean;
    };
    successorOrderId: BigNumber;
    ancestorOrderId: BigNumber;
  }>;

  getOrderPairAliasByHash(
    orderPairHash: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getOrderPairByAlias(
    orderPairAlias: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    makerContractAddress: string;
    makerCurrencyType: BigNumber;
    takerContractAddress: string;
    takerCurrencyType: BigNumber;
  }>;

  getOrderPairByHash(
    orderPairHash: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    makerContractAddress: string;
    makerCurrencyType: BigNumber;
    takerContractAddress: string;
    takerCurrencyType: BigNumber;
  }>;

  makeOrder: {
    (
      input: {
        makerValue: number | BigNumber | string;
        takerValue: number | BigNumber | string;
        pair: {
          makerContractAddress: string | BigNumber;
          makerCurrencyType: number | BigNumber | string;
          takerContractAddress: string | BigNumber;
          takerCurrencyType: number | BigNumber | string;
        };
        orderId: number | BigNumber | string;
        ancestorOrderId: number | BigNumber | string;
        updatedRatioWei: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      input: {
        makerValue: number | BigNumber | string;
        takerValue: number | BigNumber | string;
        pair: {
          makerContractAddress: string | BigNumber;
          makerCurrencyType: number | BigNumber | string;
          takerContractAddress: string | BigNumber;
          takerCurrencyType: number | BigNumber | string;
        };
        orderId: number | BigNumber | string;
        ancestorOrderId: number | BigNumber | string;
        updatedRatioWei: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      input: {
        makerValue: number | BigNumber | string;
        takerValue: number | BigNumber | string;
        pair: {
          makerContractAddress: string | BigNumber;
          makerCurrencyType: number | BigNumber | string;
          takerContractAddress: string | BigNumber;
          takerCurrencyType: number | BigNumber | string;
        };
        orderId: number | BigNumber | string;
        ancestorOrderId: number | BigNumber | string;
        updatedRatioWei: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      input: {
        makerValue: number | BigNumber | string;
        takerValue: number | BigNumber | string;
        pair: {
          makerContractAddress: string | BigNumber;
          makerCurrencyType: number | BigNumber | string;
          takerContractAddress: string | BigNumber;
          takerCurrencyType: number | BigNumber | string;
        };
        orderId: number | BigNumber | string;
        ancestorOrderId: number | BigNumber | string;
        updatedRatioWei: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  makeOrders: {
    (
      inputs: {
        makerValue: number | BigNumber | string;
        takerValue: number | BigNumber | string;
        pair: {
          makerContractAddress: string | BigNumber;
          makerCurrencyType: number | BigNumber | string;
          takerContractAddress: string | BigNumber;
          takerCurrencyType: number | BigNumber | string;
        };
        orderId: number | BigNumber | string;
        ancestorOrderId: number | BigNumber | string;
        updatedRatioWei: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      inputs: {
        makerValue: number | BigNumber | string;
        takerValue: number | BigNumber | string;
        pair: {
          makerContractAddress: string | BigNumber;
          makerCurrencyType: number | BigNumber | string;
          takerContractAddress: string | BigNumber;
          takerCurrencyType: number | BigNumber | string;
        };
        orderId: number | BigNumber | string;
        ancestorOrderId: number | BigNumber | string;
        updatedRatioWei: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber[]>;
    sendTransaction(
      inputs: {
        makerValue: number | BigNumber | string;
        takerValue: number | BigNumber | string;
        pair: {
          makerContractAddress: string | BigNumber;
          makerCurrencyType: number | BigNumber | string;
          takerContractAddress: string | BigNumber;
          takerCurrencyType: number | BigNumber | string;
        };
        orderId: number | BigNumber | string;
        ancestorOrderId: number | BigNumber | string;
        updatedRatioWei: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      inputs: {
        makerValue: number | BigNumber | string;
        takerValue: number | BigNumber | string;
        pair: {
          makerContractAddress: string | BigNumber;
          makerCurrencyType: number | BigNumber | string;
          takerContractAddress: string | BigNumber;
          takerCurrencyType: number | BigNumber | string;
        };
        orderId: number | BigNumber | string;
        ancestorOrderId: number | BigNumber | string;
        updatedRatioWei: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  onERC721Received: {
    (
      arg0: string | BigNumber,
      arg1: string | BigNumber,
      arg2: number | BigNumber | string,
      arg3: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      arg0: string | BigNumber,
      arg1: string | BigNumber,
      arg2: number | BigNumber | string,
      arg3: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      arg0: string | BigNumber,
      arg1: string | BigNumber,
      arg2: number | BigNumber | string,
      arg3: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: string | BigNumber,
      arg1: string | BigNumber,
      arg2: number | BigNumber | string,
      arg3: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  takeOrder: {
    (
      input: {
        id: number | BigNumber | string;
        maker: string | BigNumber;
        takerValue: number | BigNumber | string;
        maxTakerMakerRatio: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      input: {
        id: number | BigNumber | string;
        maker: string | BigNumber;
        takerValue: number | BigNumber | string;
        maxTakerMakerRatio: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      input: {
        id: number | BigNumber | string;
        maker: string | BigNumber;
        takerValue: number | BigNumber | string;
        maxTakerMakerRatio: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      input: {
        id: number | BigNumber | string;
        maker: string | BigNumber;
        takerValue: number | BigNumber | string;
        maxTakerMakerRatio: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  takeOrders: {
    (
      inputs: {
        id: number | BigNumber | string;
        maker: string | BigNumber;
        takerValue: number | BigNumber | string;
        maxTakerMakerRatio: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      inputs: {
        id: number | BigNumber | string;
        maker: string | BigNumber;
        takerValue: number | BigNumber | string;
        maxTakerMakerRatio: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean[]>;
    sendTransaction(
      inputs: {
        id: number | BigNumber | string;
        maker: string | BigNumber;
        takerValue: number | BigNumber | string;
        maxTakerMakerRatio: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      inputs: {
        id: number | BigNumber | string;
        maker: string | BigNumber;
        takerValue: number | BigNumber | string;
        maxTakerMakerRatio: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface DummyVanillaERC20Instance extends Truffle.ContractInstance {
  NAME(txDetails?: Truffle.TransactionDetails): Promise<string>;

  SYMBOL(txDetails?: Truffle.TransactionDetails): Promise<string>;

  allowance(
    owner: string | BigNumber,
    spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  approve: {
    (
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  decimals(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  decreaseAllowance: {
    (
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  increaseAllowance: {
    (
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mint: {
    (
      to: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  transfer: {
    (
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface DummyVanillaERC721Instance extends Truffle.ContractInstance {
  NAME(txDetails?: Truffle.TransactionDetails): Promise<string>;

  SYMBOL(txDetails?: Truffle.TransactionDetails): Promise<string>;

  approve: {
    (
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    owner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  baseURI(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getApproved(
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isApprovedForAll(
    owner: string | BigNumber,
    operator: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  mint: {
    (
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  ownerOf(
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  safeTransferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setApprovalForAll: {
    (
      operator: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      operator: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      operator: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      operator: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  supportsInterface(
    interfaceId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  tokenByIndex(
    index: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    owner: string | BigNumber,
    index: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  tokenURI(
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  transferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface EIP712BoostableInstance extends Truffle.ContractInstance {
  getNonce(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
}

export interface ERC165Instance extends Truffle.ContractInstance {
  supportsInterface(
    interfaceId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}

export interface ERC20Instance extends Truffle.ContractInstance {
  allowance(
    owner: string | BigNumber,
    spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  approve: {
    (
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  decimals(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  decreaseAllowance: {
    (
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  increaseAllowance: {
    (
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  transfer: {
    (
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface ERC721Instance extends Truffle.ContractInstance {
  approve: {
    (
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    owner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  baseURI(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getApproved(
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isApprovedForAll(
    owner: string | BigNumber,
    operator: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  ownerOf(
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  safeTransferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setApprovalForAll: {
    (
      operator: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      operator: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      operator: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      operator: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  supportsInterface(
    interfaceId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  tokenByIndex(
    index: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    owner: string | BigNumber,
    index: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  tokenURI(
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  transferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface ERC721HolderInstance extends Truffle.ContractInstance {
  onERC721Received: {
    (
      arg0: string | BigNumber,
      arg1: string | BigNumber,
      arg2: number | BigNumber | string,
      arg3: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      arg0: string | BigNumber,
      arg1: string | BigNumber,
      arg2: number | BigNumber | string,
      arg3: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      arg0: string | BigNumber,
      arg1: string | BigNumber,
      arg2: number | BigNumber | string,
      arg3: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: string | BigNumber,
      arg1: string | BigNumber,
      arg2: number | BigNumber | string,
      arg3: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface IBoostableERC20Instance extends Truffle.ContractInstance {
  allowance(
    owner: string | BigNumber,
    spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  approve: {
    (
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  boostedTransferFrom: {
    (
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnFuel: {
    (
      from: string | BigNumber,
      fuel: {
        tokenAlias: number | BigNumber | string;
        amount: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      fuel: {
        tokenAlias: number | BigNumber | string;
        amount: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      fuel: {
        tokenAlias: number | BigNumber | string;
        amount: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      fuel: {
        tokenAlias: number | BigNumber | string;
        amount: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  transfer: {
    (
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface IERC165Instance extends Truffle.ContractInstance {
  supportsInterface(
    interfaceId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}

export interface IERC1820RegistryInstance extends Truffle.ContractInstance {
  getInterfaceImplementer(
    account: string | BigNumber,
    interfaceHash: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getManager(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  implementsERC165Interface(
    account: string | BigNumber,
    interfaceId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  implementsERC165InterfaceNoCache(
    account: string | BigNumber,
    interfaceId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  interfaceHash(
    interfaceName: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  setInterfaceImplementer: {
    (
      account: string | BigNumber,
      interfaceHash: string | BigNumber,
      implementer: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      interfaceHash: string | BigNumber,
      implementer: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      interfaceHash: string | BigNumber,
      implementer: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      interfaceHash: string | BigNumber,
      implementer: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setManager: {
    (
      account: string | BigNumber,
      newManager: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      newManager: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      newManager: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      newManager: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  updateERC165Cache: {
    (
      account: string | BigNumber,
      interfaceId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      interfaceId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      interfaceId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      interfaceId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface IERC20Instance extends Truffle.ContractInstance {
  allowance(
    owner: string | BigNumber,
    spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  approve: {
    (
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  transfer: {
    (
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface IERC721Instance extends Truffle.ContractInstance {
  approve: {
    (
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    owner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getApproved(
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isApprovedForAll(
    owner: string | BigNumber,
    operator: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  ownerOf(
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  safeTransferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setApprovalForAll: {
    (
      operator: string | BigNumber,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      operator: string | BigNumber,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      operator: string | BigNumber,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      operator: string | BigNumber,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  supportsInterface(
    interfaceId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  transferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface IERC721EnumerableInstance extends Truffle.ContractInstance {
  approve: {
    (
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    owner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getApproved(
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isApprovedForAll(
    owner: string | BigNumber,
    operator: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  ownerOf(
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  safeTransferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setApprovalForAll: {
    (
      operator: string | BigNumber,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      operator: string | BigNumber,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      operator: string | BigNumber,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      operator: string | BigNumber,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  supportsInterface(
    interfaceId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  tokenByIndex(
    index: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    owner: string | BigNumber,
    index: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  transferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface IERC721MetadataInstance extends Truffle.ContractInstance {
  approve: {
    (
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    owner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getApproved(
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isApprovedForAll(
    owner: string | BigNumber,
    operator: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  ownerOf(
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  safeTransferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setApprovalForAll: {
    (
      operator: string | BigNumber,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      operator: string | BigNumber,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      operator: string | BigNumber,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      operator: string | BigNumber,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  supportsInterface(
    interfaceId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  tokenURI(
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  transferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface IERC721ReceiverInstance extends Truffle.ContractInstance {
  onERC721Received: {
    (
      operator: string | BigNumber,
      from: string | BigNumber,
      tokenId: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      operator: string | BigNumber,
      from: string | BigNumber,
      tokenId: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      operator: string | BigNumber,
      from: string | BigNumber,
      tokenId: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      operator: string | BigNumber,
      from: string | BigNumber,
      tokenId: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface IOptInInstance extends Truffle.ContractInstance {
  getOptInStatus(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    isOptedIn: boolean;
    permaBoostActive: boolean;
    optedInTo: string;
    optOutPeriod: BigNumber;
  }>;

  getOptInStatusPair(
    accountA: string | BigNumber,
    accountB: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<
    [
      {
        isOptedIn: boolean;
        permaBoostActive: boolean;
        optedInTo: string;
        optOutPeriod: BigNumber;
      },
      {
        isOptedIn: boolean;
        permaBoostActive: boolean;
        optedInTo: string;
        optOutPeriod: BigNumber;
      }
    ]
  >;

  isOptedInBy(
    _sender: string | BigNumber,
    _account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[boolean, BigNumber]>;
}

export interface MigrationsInstance extends Truffle.ContractInstance {
  last_completed_migration(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  setCompleted: {
    (
      completed: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      completed: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      completed: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      completed: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface OwnableInstance extends Truffle.ContractInstance {
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}
